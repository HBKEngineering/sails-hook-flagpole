{
  "name": "jsonapi-serializer",
  "version": "2.0.4",
  "description": "A Node.js framework agnostic library for serializing your data to JSON API",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "author": {
    "name": "Sandro Munda",
    "email": "sandro@munda.me"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/seyz/jsonapi-serializer.git"
  },
  "dependencies": {
    "inflection": "^1.7.1",
    "lodash": "^3.9.3"
  },
  "devDependencies": {
    "chai": "^2.3.0",
    "grunt": "^0.4.5",
    "grunt-browserify": "^4.0.0",
    "mocha": "^2.2.5"
  },
  "gitHead": "f5df08c0b860f0ef0fbe2d76dfbbc4280fa3675b",
  "readme": "# JSON API Serializer\n[![Build Status](https://travis-ci.org/SeyZ/jsonapi-serializer.svg?branch=master)](https://travis-ci.org/SeyZ/jsonapi-serializer)\n\nA Node.js framework agnostic library for serializing your data to [JSON\nAPI](http://jsonapi.org) (1.0 compliant).\n\n## Installation\n`$ npm install jsonapi-serializer`\n\n## Documentation\n\n**JSONAPISerializer(type, data, opts)** serializes the *data* (can be an object or an array) following the rules defined in *opts*.\n\n- type: The resource type.\n- data: An object to serialize.\n- opts\n    - *attributes*: An array of attributes to show. You can define an attribute as an option if you want to define some relationships (included or not).\n        - *ref*: If present, it's considered as a relationships.\n        - *included*: Consider the relationships as [compound document](http://jsonapi.org/format/#document-compound-documents). Default: true.\n        - *attributes*: An array of attributes to show.\n        - *topLevelLinks*: An object that describes the top-level links. Values can be *string* or a *function* (see examples below)\n        - *dataLinks*: An object that describes the links inside data. Values can be *string* or a *function* (see examples below)\n        - *relationshipLinks*: An object that describes the links inside relationships. Values can be *string* or a *function* (see examples below)\n        - *ignoreRelationshipData*: Do not include the `data` key inside the relationship. Default: false.\n        - *keyForAttribute*: A function or string to customize attributes. Functions are passed the attribute as a single argument and expect a string to be returned. Strings are aliases for inbuilt functions for common case conversions. Options include:\n          - dash-case (default)\n          - lisp-case\n          - spinal-case\n          - kebab-case\n          - underscore_case\n          - snake_case\n          - CamelCase\n          - camelCase\n        - *pluralizeType*: A boolean to indicate if the type must be pluralized or not. Default: true.\n        - *typeForAttribute*: A function that maps the attribute (passed as an argument) to the type you want to override. Option *pluralizeType* ignored if set.\n        - *meta*: An object to include non-standard meta-information.\n\n## Examples\n\n- [Express example](https://github.com/SeyZ/jsonapi-serializer/tree/master/examples/express)\n- [Simple](#simple-usage)\n- [Nested resource](#nested-resource)\n- [Compound document](#compound-document)\n\n<a name=\"simple-usage\"/>\n### Simple usage\n\n```javascript\n// Sample data object\nvar data = [{\n    id: 1,\n    firstName: 'Sandro',\n    lastName: 'Munda'\n  },{\n    id: 2,\n    firstName: 'John',\n    lastName: 'Doe'\n  }];\n```\n\n```javascript\nvar JSONAPISerializer = require('jsonapi-serializer');\n\nvar users =new JSONAPISerializer('users', data, {\n  topLevelLinks: { self: 'http://localhost:3000/api/users' },\n  dataLinks: {\n    self: function (user) {\n      return 'http://localhost:3000/api/users/' + user.id\n    }\n  },\n  attributes: ['firstName', 'lastName']\n});\n\n// `users` here are JSON API compliant.\n```\n\nThe result will be something like:\n\n```javascript\n{\n  \"links\": {\n    \"self\": \"http://localhost:3000/api/users\"\n  },\n  \"data\": [{\n    \"type\": \"users\",\n    \"id\": \"1\",\n    \"attributes\": {\n      \"first-name\": \"Sandro\",\n      \"last-name\": \"Munda\"\n    },\n    \"links\": \"http://localhost:3000/api/users/1\"\n  }, {\n    \"type\": \"users\",\n    \"id\": \"2\",\n    \"attributes\": {\n      \"first-name\": \"John\",\n      \"last-name\": \"Doe\"\n    },\n    \"links\": \"http://localhost:3000/api/users/2\"\n  }]\n}\n```\n\n<a name=\"nested-resource\"/>\n### Nested resource\n```javascript\nvar JSONAPISerializer = require('jsonapi-serializer');\n\nvar users = new JSONAPISerializer('users', data, {\n  topLevelLinks: { self: 'http://localhost:3000/api/users' },\n  attributes: ['firstName', 'lastName', 'address'],\n  address: {\n    attributes: ['addressLine1', 'zipCode', 'city']\n  }\n});\n\n// `users` here are JSON API compliant.\n```\n\nThe result will be something like:\n\n```javascript\n{\n  \"links\": {\n    \"self\": \"http://localhost:3000/api/users\"\n  },\n  \"data\": [{\n    \"type\": \"users\",\n    \"id\": \"1\",\n    \"attributes\": {\n      \"first-name\": \"Sandro\",\n      \"last-name\": \"Munda\",\n      \"address\": {\n        \"address-line1\": \"630 Central Avenue\",\n        \"zip-code\": 24012,\n        \"city\": \"Roanoke\"\n      }\n    }\n  }, {\n    \"type\": \"users\",\n    \"id\": \"2\",\n    \"attributes\": {\n      \"first-name\": \"John\",\n      \"last-name\": \"Doe\",\n      \"address\": {\n        \"address-line1\": \"400 State Street\",\n        \"zip-code\": 33702,\n        \"city\": \"Saint Petersburg\"\n      }\n    }\n  }]\n}\n```\n\n<a name=\"compound-document\"/>\n### Compound document\n\n```javascript\nvar JSONAPISerializer = require('jsonapi-serializer');\n\nvar users = new JSONAPISerializer('users', data, {\n  topLevelLinks: { self: 'http://localhost:3000/api/users' },\n  attributes: ['firstName', 'lastName', 'books'],\n  books: {\n    ref: '_id',\n    attributes: ['title', 'isbn'],\n    relationshipLinks: {\n      \"self\": \"http://example.com/relationships/books\",\n      \"related\": \"http://example.com/books\"\n    },\n    includedLinks: {\n      self: function (dataSet, book) {\n        return 'http://example.com/books/' + book.id;\n      }\n    }\n  }\n});\n\n// `users` here are JSON API compliant.\n```\n\nThe result will be something like:\n\n```javascript\n{\n  \"links\": {\n    \"self\": \"http://localhost:3000/api/users\"\n  },\n  \"data\": [{\n    \"type\": \"users\",\n    \"id\": \"1\",\n    \"attributes\": {\n      \"first-name\": \"Sandro\",\n      \"last-name\": \"Munda\"\n    },\n    \"relationships\": {\n      \"books\": {\n        \"data\": [\n          { \"type\": \"books\", \"id\": \"1\" },\n          { \"type\": \"books\", \"id\": \"2\" }\n        ],\n        \"links\": {\n          \"self\": \"http://example.com/relationships/books\",\n          \"related\": \"http://example.com/books\"\n        }\n      }\n    }\n  }, {\n    \"type\": \"users\",\n    \"id\": \"2\",\n    \"attributes\": {\n      \"first-name\": \"John\",\n      \"last-name\": \"Doe\"\n    },\n    \"relationships\": {\n      \"books\": {\n        \"data\": [\n          { \"type\": \"books\", \"id\": \"3\" }\n        ],\n        \"links\": {\n          \"self\": \"http://example.com/relationships/books\",\n          \"related\": \"http://example.com/books\"\n        }\n      }\n    }\n  }],\n  \"included\": [{\n  \t\"type\": \"books\",\n  \t\"id\": \"1\",\n  \t\"attributes\": {\n  \t  \"title\": \"La Vida Estilista\",\n  \t  \"isbn\": \"9992266589\"\n  \t},\n    \"links\": {\n      \"self\": \"http://example.com/books/1\"\n    }\n  }, {\n   \"type\": \"books\",\n   \"id\": \"2\",\n   \"attributes\": {\n  \t  \"title\": \"La Maria Cebra\",\n  \t  \"isbn\": \"9992264446\"\n  \t},\n    \"links\": {\n     \"self\": \"http://example.com/books/2\"\n    }\n  }, {\n   \"type\": \"books\",\n   \"id\": \"3\",\n   \"attributes\": {\n  \t  \"title\": \"El Salero Cangrejo\",\n  \t  \"isbn\": \"9992209739\"\n  \t},\n    \"links\": {\n      \"self\": \"http://example.com/books/3\"\n    }\n  }]\n}\n```\n\n\n# License\n\n[MIT](https://github.com/SeyZ/jsonapi-serializer/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/seyz/jsonapi-serializer/issues"
  },
  "homepage": "https://github.com/seyz/jsonapi-serializer#readme",
  "_id": "jsonapi-serializer@2.0.4",
  "_shasum": "2a4ac40e284f66ae9d1bcb99a72ed5d89a6c453c",
  "_from": "brettneese/jsonapi-serializer#3.0.0-beta.1",
  "_resolved": "git://github.com/brettneese/jsonapi-serializer.git#f5df08c0b860f0ef0fbe2d76dfbbc4280fa3675b"
}
